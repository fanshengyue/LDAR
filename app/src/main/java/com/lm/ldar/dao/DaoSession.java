package com.lm.ldar.dao;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.lm.ldar.entity.Area;
import com.lm.ldar.entity.Ctype;
import com.lm.ldar.entity.Department;
import com.lm.ldar.entity.Device;
import com.lm.ldar.entity.Enterprise;
import com.lm.ldar.entity.Factory;
import com.lm.ldar.entity.Namerules;
import com.lm.ldar.entity.Picture;
import com.lm.ldar.entity.Pictureversion;
import com.lm.ldar.entity.User;
import com.lm.ldar.entity.Workplan;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 *
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig userDaoConfig;
    private final DaoConfig enterpriseDaoConfig;
    private final DaoConfig factoryDaoConfig;
    private final DaoConfig areaDaoConfig;
    private final DaoConfig deviceDaoConfig;
    private final DaoConfig nameRulesDaoConfig;
    private final DaoConfig ctypeDaoConfig;
    private final DaoConfig workplanDaoConfig;
    private final DaoConfig departmentDaoConfig;
    private final DaoConfig pictureversionDaoConfig;
    //private final DaoConfig pictureDaoConfig;

    private final UserDao userDao;
    private final EnterpriseDao enterpriseDao;
    private final FactoryDao factoryDao;
    private final AreaDao areaDao;
    private final DeviceDao deviceDao;
    private final NamerulesDao namerulesDao;
    private final CtypeDao ctypeDao;
    private final WorkplanDao workplanDao;
    private final DepartmentDao departmentDao;
    private final PictureversionDao pictureversionDao;
    //private final PictureDao pictureDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);
        // 用户
        userDaoConfig = daoConfigMap.get(UserDao.class).clone();
        userDaoConfig.initIdentityScope(type);
        // 企业
        enterpriseDaoConfig = daoConfigMap.get(EnterpriseDao.class).clone();
        enterpriseDaoConfig.initIdentityScope(type);
        // 厂区
        factoryDaoConfig = daoConfigMap.get(FactoryDao.class).clone();
        factoryDaoConfig.initIdentityScope(type);
        // 子区域
        areaDaoConfig = daoConfigMap.get(AreaDao.class).clone();
        areaDaoConfig.initIdentityScope(type);
        // 装置
        deviceDaoConfig = daoConfigMap.get(DeviceDao.class).clone();
        deviceDaoConfig.initIdentityScope(type);
        // 命名规则
        nameRulesDaoConfig = daoConfigMap.get(NamerulesDao.class).clone();
        nameRulesDaoConfig.initIdentityScope(type);
        // 组件类型
        ctypeDaoConfig = daoConfigMap.get(CtypeDao.class).clone();
        ctypeDaoConfig.initIdentityScope(type);
        // 工作计划
        workplanDaoConfig = daoConfigMap.get(WorkplanDao.class).clone();
        workplanDaoConfig.initIdentityScope(type);
        // 部门
        departmentDaoConfig = daoConfigMap.get(DepartmentDao.class).clone();
        departmentDaoConfig.initIdentityScope(type);
        // 图片版本
        pictureversionDaoConfig = daoConfigMap.get(PictureversionDao.class).clone();
        pictureversionDaoConfig.initIdentityScope(type);
        // 图片
//        pictureDaoConfig = daoConfigMap.get(PictureDao.class).clone();
//        pictureDaoConfig.initIdentityScope(type);

        userDao = new UserDao(userDaoConfig, this);
        enterpriseDao = new EnterpriseDao(enterpriseDaoConfig, this);
        factoryDao = new FactoryDao(factoryDaoConfig, this);
        areaDao = new AreaDao(areaDaoConfig, this);
        deviceDao = new DeviceDao(deviceDaoConfig, this);
        namerulesDao = new NamerulesDao(nameRulesDaoConfig, this);
        ctypeDao = new CtypeDao(ctypeDaoConfig, this);
        workplanDao = new WorkplanDao(workplanDaoConfig, this);
        departmentDao = new DepartmentDao(departmentDaoConfig, this);
        pictureversionDao = new PictureversionDao(pictureversionDaoConfig,this);
//        pictureDao = new PictureDao(pictureDaoConfig,this);

        registerDao(User.class, userDao);
        registerDao(Enterprise.class, enterpriseDao);
        registerDao(Factory.class, factoryDao);
        registerDao(Area.class, areaDao);
        registerDao(Device.class, deviceDao);
        registerDao(Namerules.class, namerulesDao);
        registerDao(Ctype.class, ctypeDao);
        registerDao(Workplan.class, workplanDao);
        registerDao(Department.class, departmentDao);
        registerDao(Pictureversion.class,pictureversionDao);
//        registerDao(Picture.class,pictureDao);
    }

    public void clear() {
        userDaoConfig.clearIdentityScope();
        enterpriseDaoConfig.clearIdentityScope();
        factoryDaoConfig.clearIdentityScope();
        areaDaoConfig.clearIdentityScope();
        deviceDaoConfig.clearIdentityScope();
        nameRulesDaoConfig.clearIdentityScope();
        ctypeDaoConfig.clearIdentityScope();
        workplanDaoConfig.clearIdentityScope();
        departmentDaoConfig.clearIdentityScope();
        pictureversionDaoConfig.clearIdentityScope();
//        pictureDaoConfig.clearIdentityScope();
    }

    public UserDao getUserDao() {
        return userDao;
    }

    public EnterpriseDao getEnterpriseDao() {
        return enterpriseDao;
    }

    public FactoryDao getFactoryDao() {
        return factoryDao;
    }

    public AreaDao getAreaDao() {
        return areaDao;
    }

    public DeviceDao getDeviceDao() {
        return deviceDao;
    }

    public NamerulesDao getNamerulesDao() {
        return namerulesDao;
    }

    public CtypeDao getCtypeDao() {
        return ctypeDao;
    }

    public WorkplanDao getWorkplanDao() {
        return workplanDao;
    }

    public DepartmentDao getDepartmentDao() {
        return departmentDao;
    }

    public PictureversionDao getPictureversionDao() {
        return pictureversionDao;
    }

//    public PictureDao getPictureDao() {
//        return pictureDao;
//    }
}
